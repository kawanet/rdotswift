// rtoswift.js

var rtojson = require("./rtojson");

module.exports = rtoswift;

/**
 * generates Swift source code from resource XML
 *
 * @param xml {String|Buffer}
 * @param callback {Function} function(err, swift) {...}
 */

function rtoswift(xml, callback) {
  return rtojson(xml, then);

  function then(err, R) {
    if (err) {
      if (callback) return callback(err);
      throw err;
    }

    var rows = [];
    rows.push("//");
    rows.push("//  Generated by rtoswift <https://github.com/kawanet/rtoswift>");
    rows.push("");
    rows.push("import UIKit");
    rows.push("");

    var out = [];
    out = out.concat(bool(R.bool));
    out = out.concat(color(R.color));
    out = out.concat(dimen(R.dimen));
    out = out.concat(string(R.string));

    var swift = out.length ? rows.concat(out).join("\n") : "";
    if (callback) return callback(null, swift);
  }
}

function string(src) {
  var rows = [];
  for (var key in src) {
    var val = src[key];
    rows.push(comment(val));
    val = JSON.stringify(val + "").replace(/\\\\/g, "\\");
    var row = "    static let " + key + " = " + val;
    rows.push(row);
  }
  return extension("string", rows);
}

function color(src) {
  var rows = [];
  for (var key in src) {
    var val = src[key];
    if (!val) return;
    if (!val.match(/^#\w+$/)) return;
    var rgb = parseInt(val.substr(1), 16);
    var blue = rgb & 0xFF;
    rgb >>= 8;
    var green = rgb & 0xFF;
    rgb >>= 8;
    var red = rgb & 0xFF;
    rows.push(comment(val));
    var row = "    static let " + key + " = " +
      "UIColor(red: " + c(red) + ", green: " + c(green) + ", blue:" + c(blue) + ", alpha: 1)";
    rows.push(row);
  }
  return extension("color", rows);

  function c(val) {
    return Math.round(val / 255 * 1000) / 1000;
  }
}

function dimen(src) {
  var rows = [];
  for (var key in src) {
    var val = src[key];
    if (!val) return;
    rows.push(comment(val));
    var row = "    static let " + key + ": CGFloat = " + parseInt(val);
    rows.push(row);
  }
  return extension("dimen", rows);
}

function bool(src) {
  var rows = [];
  for (var key in src) {
    var val = src[key];
    rows.push(comment(val));
    var row = "    static let " + key + " = " + val;
    rows.push(row);
  }
  return extension("bool", rows);
}

function extension(type, rows) {
  if (rows.length) {
    rows.unshift("extension R." + type + " {");
    rows.push("}");
    rows.push("");
  }
  return rows;
}

function comment(val) {
  if (val === "") val = "(empty)";
  if ("string" === typeof val) {
    val = val.replace(/\*\//g, "*\\/");
    val = val.replace(/\n/g, "\\n");
  }
  return "    /** " + val + " */";
}